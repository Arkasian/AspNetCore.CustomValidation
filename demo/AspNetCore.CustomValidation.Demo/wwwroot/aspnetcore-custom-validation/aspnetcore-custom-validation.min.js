// Unobtrusive validation support library for AspNetCore.CustomValidation library
// Copyright (c) TanvirArjel. All rights reserved.
// Licensed under the MIT License, Version 2.0. See License.txt in the project root for license information.
// @version v1.0.0

!function (e) { e.validator.setDefaults({ onfocusout: function (e, t) { 9 === t.which && "" === this.elementValue(e) || this.element(e) } }), e.validator.addMethod("mindate", function (e, t, a) { if (e) { return (-1 === e.indexOf("T") ? new Date(e + "T00:00:00") : new Date(e)) >= new Date(a.date) } return !0 }), e.validator.unobtrusive.adapters.add("mindate", ["date"], function (e) { e.rules.mindate = e.params, e.messages.mindate = e.message }), e.validator.addMethod("maxdate", function (e, t, a) { return !e || (-1 === e.indexOf("T") ? new Date(e + "T00:00:00") : new Date(e)) <= new Date(a.date) }), e.validator.unobtrusive.adapters.add("maxdate", ["date"], function (e) { e.rules.maxdate = e.params, e.messages.maxdate = e.message }), e.validator.addMethod("currenttime", function (e, t, a) { if (e) { const t = -1 === e.indexOf("T") ? new Date(e + "T00:00:00") : new Date(e); return new Date > t } return !0 }), e.validator.unobtrusive.adapters.add("currenttime", [], function (e) { e.rules.currenttime = {}, e.messages.currenttime = e.message }), e.validator.addMethod("maxage", function (e, t, a) { if (e) { const t = -1 === e.indexOf("T") ? new Date(e + "T00:00:00") : new Date(e); let n = new Date; return n.setFullYear(n.getFullYear() - a.years), n.setMonth(n.getMonth() - a.months), n.setDate(n.getDate() - a.days), t >= n } return !0 }), e.validator.unobtrusive.adapters.add("maxage", ["years", "months", "days"], function (e) { e.rules.maxage = e.params, e.messages.maxage = e.message }), e.validator.addMethod("minage", function (e, t, a) { if (e) { let t = new Date; const n = -1 === e.indexOf("T") ? new Date(e + "T00:00:00") : new Date(e); return t.setFullYear(t.getFullYear() - a.years), t.setMonth(t.getMonth() - a.months), t.setDate(t.getDate() - a.days), t >= n } return !0 }), e.validator.unobtrusive.adapters.add("minage", ["years", "months", "days"], function (e) { e.rules.minage = e.params, e.messages.minage = e.message }), e.validator.addMethod("filetype", function (e, t, a) { var n = e.split(".").pop(); return -1 !== a.validtypes.toLowerCase().indexOf(n.toLowerCase()) }), e.validator.unobtrusive.adapters.add("filetype", ["validtypes"], function (e) { e.rules.filetype = e.params, e.messages.filetype = e.message }), e.validator.addMethod("file-minsize", function (e, t, a) { if (e && t.files[0]) { var n = a.value; return t.files[0].size / 1024 >= n } return !0 }), e.validator.unobtrusive.adapters.add("file-minsize", ["value"], function (e) { e.rules["file-minsize"] = e.params, e.messages["file-minsize"] = e.message }), e.validator.addMethod("file-maxsize", function (e, t, a) { if (e && t.files[0]) { var n = a.value; return t.files[0].size / 1024 <= n } return !0 }), e.validator.unobtrusive.adapters.add("file-maxsize", ["value"], function (e) { e.rules["file-maxsize"] = e.params, e.messages["file-maxsize"] = e.message }), e.validator.addMethod("input-type-compare", function (t, a, n) { var r = e(a).prop("type"), s = n.property; return r === e(a).closest("form").find('input[name="' + s + '"]').prop("type") }), e.validator.unobtrusive.adapters.add("input-type-compare", ["property"], function (e) { e.rules["input-type-compare"] = e.params, e.messages["input-type-compare"] = e.message }), e.validator.addMethod("comparison-equality", function (t, a, n) { const r = t, s = e(a).prop("type"), i = n.property, o = e(a).closest("form").find('input[name="' + i + '"]'), d = o.prop("type"), u = o.val(); if (r && u) { if ("number" === s && s === d) return Number(t) === Number(o.val()); if ("text" === s && s === d) return r.length === u.length; if (-1 !== s.indexOf("date") && -1 !== d.indexOf("date")) { const e = -1 === t.indexOf("T") ? new Date(t + "T00:00:00") : new Date(t), a = -1 === u.indexOf("T") ? new Date(u + "T00:00:00") : new Date(u); return e.getTime() === a.getTime() } } return !0 }), e.validator.unobtrusive.adapters.add("comparison-equality", ["property"], function (e) { e.rules["comparison-equality"] = e.params, e.messages["comparison-equality"] = e.message }), e.validator.addMethod("comparison-greater", function (t, a, n) { const r = t; let s = e(a).prop("type"); const i = n.property, o = e(a).closest("form").find('input[name="' + i + '"]'), d = o.prop("type"), u = o.val(); if (r && u) { if ("number" === s && s === d) return Number(r) > Number(u); if ("text" === s && s === d) return r.length > u.length; if (-1 !== s.indexOf("date") && -1 !== d.indexOf("date")) { return (-1 === t.indexOf("T") ? new Date(t + "T00:00:00") : new Date(t)) > (-1 === u.indexOf("T") ? new Date(u + "T00:00:00") : new Date(u)) } } return !0 }), e.validator.unobtrusive.adapters.add("comparison-greater", ["property"], function (e) { e.rules["comparison-greater"] = e.params, e.messages["comparison-greater"] = e.message }), e.validator.addMethod("comparison-smaller", function (t, a, n) { const r = t, s = e(a).prop("type"), i = n.property, o = e(a).closest("form").find('input[name="' + i + '"]'), d = o.prop("type"), u = o.val(); if (r && u) { if ("number" === s && s === d) return Number(r) < Number(u); if ("text" === s && s === d) return r.length < u.length; if (-1 !== s.indexOf("date") && -1 !== d.indexOf("date")) { return (-1 === t.indexOf("T") ? new Date(t + "T00:00:00") : new Date(t)) < (-1 === u.indexOf("T") ? new Date(u + "T00:00:00") : new Date(u)) } } return !0 }), e.validator.unobtrusive.adapters.add("comparison-smaller", ["property"], function (e) { e.rules["comparison-smaller"] = e.params, e.messages["comparison-smaller"] = e.message }), e.validator.addMethod("tinymce-required", function (t, a, n) { const r = jQuery(e("<p>").html(t)).text().replace(/\s\s+/g, " "); return " " !== r && r.length > 0 }), e.validator.unobtrusive.adapters.add("tinymce-required", [], function (e) { e.rules["tinymce-required"] = e.params, e.messages["tinymce-required"] = e.message }), e.validator.addMethod("tinymce-minlength", function (t, a, n) { const r = jQuery(e("<p>").html(t)).text().replace(/\s\s+/g, " "), s = n.value; return " " !== r && r.length >= s }), e.validator.unobtrusive.adapters.add("tinymce-minlength", ["value"], function (e) { e.rules["tinymce-minlength"] = e.params, e.messages["tinymce-minlength"] = e.message }), e.validator.addMethod("tinymce-maxlength", function (t, a, n) { const r = jQuery(e("<p>").html(t)).text().replace(/\s\s+/g, " "), s = n.value; return " " !== r && r.length <= s }), e.validator.unobtrusive.adapters.add("tinymce-maxlength", ["value"], function (e) { e.rules["tinymce-maxlength"] = e.params, e.messages["tinymce-maxlength"] = e.message }) }(jQuery);